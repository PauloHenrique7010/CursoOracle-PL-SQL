Item 37 - Associative Array

Collection é uma estrutura para gerenciamento de multiplas linhas de dados
Colections são vetores (apenas uma dimensão)
Tipos de collections: Associative Arrays, Nested Table, Varray.
Associative array permite multiplas linhas enquanto o type record somente uma

Associative Array
 - uma dimensão
 - Tipos de dados oracle (Varchar2)
 - Conhecido como index-by-table ou plsql tables
 - pode ser indexado por caracter ou números (permite buracos na numeração do indice
 - Fica na memoria e n no bd
 "INDEX BY"
 
 "DECLARE
 TYPE nome_tipo_table
 IS TABLE OF nome_table.nome_colune%type
 INDEX BY BINARY_INTEGER;
 
 nome_variavel_table nome_tipo_table;
 "
 
pratica 

SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
  TYPE Numero_Table_Type IS TABLE OF NUMBER(2)
  INDEX BY BINARY_INTEGER;  -- Type Associative Array
  Numero_Table Numero_Table_Type;
BEGIN
  FOR i IN 1..10
  LOOP
    Numero_Table(i) := i;
  END LOOP;

  FOR i IN 1..10
  LOOP
    DBMS_OUTPUT.PUT_LINE('Associative Array: Indice = '|| TO_CHAR(i) || ', Valor = '|| TO_CHAR(Numero_Table(i)));
  END LOOP;
END;
 
Item 38 - Associative Array of Records - Bulk Collection
 - Toda a estrutura de uma tabela é um tipo record
 
 "DECLARE 
 TYPE employees_table_type
 IS TABLE OF employees%ROWTYPE;
 
 employees_table employees_table_type;
 
 SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
  TYPE employees_table_type IS TABLE OF employees%rowtype
  INDEX BY BINARY_INTEGER;  -- Type Associative Array
  employees_table  employees_table_type;
BEGIN
  SELECT *
    BULK COLLECT INTO employees_table 
  FROM employees;
  FOR i IN employees_table.first..employees_table.last  
  LOOP
    DBMS_OUTPUT.PUT_LINE(employees_table(i).employee_id || ' - ' || 
                         employees_table(i).first_name || ' - ' || 
                         employees_table(i).last_name || ' - ' ||
                         employees_table(i).phone_number || ' - ' ||
                         employees_table(i).job_id || ' - ' ||
                         TO_CHAR(employees_table(i).salary,'99G999G999D99'));   
  END LOOP;
END;

Item 39 - Nested Table
 - Estruturas uni dimensionais (vetor)
 - Tipo de dados oracle
 - Introduzido no oracle 8
 - Dinamicamente estendida
 - Quando apaga um registro, fica um buracos
 - Pode armazenar em tabela (n é usado por causa da normalização)
 - Elementos devem ser alocados com o metodo EXTEND
 - Indexado por valores positivos
 - Obrigatorio inicializar e n precisa do index by
 
 "DECLARE
 TYPE nome_tipo_table
 IS TABLE OF nome_table.nome_coluna%type;
 --NÃO COLOCA INDEX BY (ISSO IDENTIFICA QUE É UM NESTED TABLE)
 
 nome_variavel_table nome_tipo_table := nome_tipo_table (); --obrigatorio a inicialização
 "
 
 "BEGIN
 nome_variavel_table.extend;
 nome_variavel_table(indice) := valor;
 "
 
 SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
  TYPE Numero_Table_Type IS TABLE OF INTEGER(2);
  Numero_table numero_table_type := numero_table_type();
BEGIN
  -- Armazena números de 1 a 10 em um Nested Table
  FOR i IN 1..10
  LOOP
    Numero_Table.extend;
    Numero_Table(i) := i;
  END LOOP;
  -- O programa vai fazer muitas coisas...
  -- Lê o Nested Table e imprime os números armazenados
  FOR I IN 1..10
  LOOP
    DBMS_OUTPUT.PUT_LINE('Nested Table: Indice = ' || TO_CHAR(i) || ', Valor = ' || TO_CHAR(Numero_Table(i)));
  END LOOP;
END;

Item 40 - Nested Table of Records - Bulk Collection
"
DECLARE 
TYPE employees_table_type
IS TABLE OF employees%ROWTYPE;
--n tem index by

employees_table employees_table_type := employees_table_type();
"

SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
  TYPE employees_table_type IS TABLE OF employees%rowtype;
  employees_table  employees_table_type := employees_table_type();
BEGIN
  SELECT *
    BULK COLLECT INTO employees_table 
  FROM employees;
  FOR i IN employees_table.first..employees_table.last  
  LOOP
    DBMS_OUTPUT.PUT_LINE(employees_table(i).employee_id || ' - ' || 
                         employees_table(i).first_name || ' - ' || 
                         employees_table(i).last_name || ' - ' ||
                         employees_table(i).phone_number || ' - ' ||
                         employees_table(i).job_id || ' - ' ||
                         TO_CHAR(employees_table(i).salary,'99G999G999D99'));   
  END LOOP;
END;

Item 41 - Collections - Varray
 - Estrutura unidimencional(vetor) do tipo de dado oracle
 - Introduzida no oracle 8
 - Semelhante ao array tradicional de programação
 - Tamanho variavel, mas precisa ter um tamanho maximo
 "
 DECLARE
 TYPE nome_tipo_varray
 IS VARRAY | VARYNG ARRAY (limite) OF
 nome_table.nome_coluna%type;
 
 nome_variavel_varray nome_tipo_varray := nome_tipo_varray();
 "
 
 "BEGIN
 nome_variavel_varray.extend;
 nome_variavel_varray(indice) := valor;
 "
 
 SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
  TYPE Numero_Table_Type IS VARRAY (10) OF INTEGER(2);
  Numero_table numero_table_type := numero_table_type();
BEGIN
  -- Armazena números de 1 a 10 em um Varray
  FOR i IN 1..10
  LOOP
    Numero_Table.extend;
    Numero_Table(i) := i;
  END LOOP;
  -- O programa vai fazer muitas coisas...
  -- Lê o Varray e imprime os números armazenados
  FOR i IN 1..10
  LOOP
    DBMS_OUTPUT.PUT_LINE('Varray: Indice = ' || TO_CHAR(i) || ', Valor = ' || TO_CHAR(Numero_Table(i)));
  END LOOP;
END;
 
Item 42 - Collections - Varray

SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
  TYPE employees_table_type IS VARRAY (200) OF employees%rowtype; --precisa saber a qtd de linha da tabela
  employees_table  employees_table_type := employees_table_type();
BEGIN
  SELECT *
    BULK COLLECT INTO employees_table 
  FROM employees;
  FOR i IN employees_table.first..employees_table.last  
  LOOP
    DBMS_OUTPUT.PUT_LINE(employees_table(i).employee_id || ' - ' || 
                         employees_table(i).first_name || ' - ' || 
                         employees_table(i).last_name || ' - ' ||
                         employees_table(i).phone_number || ' - ' ||
                         employees_table(i).job_id || ' - ' ||
                         TO_CHAR(employees_table(i).salary,'99G999G999D99'));   
  END LOOP;
END;

Item 43 - Metodos para controlar collections

- Exists, Count, First, Last
First e last - se collection vazia, retorna null
LIMIT - so funciona no VARRAY
PRIOR(n) - num indice anterior de n
next(n) - num indice dps de n
TRIM - remove um elemento do final da collection
TRIM(N) - remove n elementos do final da collections (nested table)


SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
  TYPE employees_table_type IS TABLE OF employees%rowtype;
  employees_table  employees_table_type := employees_table_type();
BEGIN
  SELECT *
    BULK COLLECT INTO employees_table 
  FROM employees;
  FOR i IN employees_table.first..employees_table.last  
  LOOP
    DBMS_OUTPUT.PUT_LINE(employees_table(i).employee_id || ' - ' || 
                         employees_table(i).first_name || ' - ' || 
                         employees_table(i).last_name || ' - ' ||
                         employees_table(i).phone_number || ' - ' ||
                         employees_table(i).job_id || ' - ' ||
                         TO_CHAR(employees_table(i).salary,'99G999G999D99'));   
  END LOOP;
END;