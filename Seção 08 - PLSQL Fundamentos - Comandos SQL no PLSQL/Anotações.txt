Item 21 - Utilizando comandos SQL no PL/SQL
 - Commit, SAVEPOINT e ROLLBACK não dependem do inicio e fim do bloco plsql
  - podem ser executados dentro do bloco plsql
 - Não pode ser executado comandos DDL (Create Table, create view..)
  - Dá para fazer essa tarefa através de SQL Dinâmico
 - PL/SQL não aceita comandos DCL (INVOKE, GRANT)
  - Dá para fazer essa tarefa através de SQL Dinânico

Item 22 - Utilizando comando SELECT no PL/SQL
 - Um pouco diferente do SQL
 - O select tem que ir para uma variavel
  - "SELECT x, y INTO vX, xY FROM tabela
 - Select do PL/SQL só pode retornar uma linha
  - Caso traga mais de uma linha, estoura exceção (TOO_MANY_ROWS)
  - Caso traga nenhuma, estoura exceção (NO_DATA_FOUND"
  - Tem que garantir que retorne uma linha através de tratamento 
    de exceções
 - Prática
 
SET SERVEROUTPUT ON
DECLARE
   vFirst_name  employees.first_name%type;
   vLast_name   employees.last_name%type;
   vSalary      employees.salary%type;
   vEmployee_id employees.employee_id%type := 121;
BEGIN
   SELECT first_name, last_name, salary
   INTO   vfirst_name, vlast_name, vsalary
   FROM   employees
   WHERE  employee_id = vEmployee_id;
   DBMS_OUTPUT.PUT_LINE('Employee Id: ' || vEmployee_id);
   DBMS_OUTPUT.PUT_LINE('Fist Name: ' || vFirst_name);
   DBMS_OUTPUT.PUT_LINE('Last Name: ' || vLast_name);
   DBMS_OUTPUT.PUT_LINE('Salary: ' || vSalary);
END;
 
SET SERVEROUTPUT ON
DECLARE
   vJob_id          employees.job_id%type := 'IT_PROG';
   vAvg_Salary      employees.salary%type;
   vSum_Salary      employees.salary%type;
BEGIN
   SELECT ROUND(AVG(salary),2), ROUND(SUM(salary),2)
   INTO   vAvg_Salary, vSum_Salary 
   FROM   employees
   WHERE  job_id = vJob_id;
   DBMS_OUTPUT.PUT_LINE('Cargo: ' || vJob_id);
   DBMS_OUTPUT.PUT_LINE('Média de salários: ' || vAvg_Salary);
   DBMS_OUTPUT.PUT_LINE('Somatório de salarios: ' || vSum_Salary);
END;

-- Erro ORA-01422 - Too Many Rows

SET SERVEROUTPUT ON
DECLARE
   vJob_id          employees.job_id%type;
   vAvg_Salary      employees.salary%type;
   vSum_Salary      employees.salary%type;
BEGIN
   SELECT job_id, ROUND(AVG(salary),2), ROUND(SUM(salary),2)
   INTO   vJob_id, vAvg_Salary, vSum_Salary 
   FROM   employees
   GROUP BY job_id;
   DBMS_OUTPUT.PUT_LINE('Cargo: ' || vJob_id);
   DBMS_OUTPUT.PUT_LINE('Média de salários: ' || vAvg_Salary);
   DBMS_OUTPUT.PUT_LINE('Somatório de salarios: ' || vSum_Salary);
END;

Item 23 - Utilizando comando INSERT no PL/SQL

SET SERVEROUTPUT ON
DECLARE
   vfirst_name  employees.first_name%type;
   vlast_name   employees.last_name%type;
   vsalary      employees.salary%type;
BEGIN
   INSERT INTO employees 
   (employee_id, first_name, last_name, email, phone_number, hire_date,
    job_id, salary, commission_pct, manager_id, department_id)
    VALUES 
    (employees_seq.nextval, 'Kobe', 'Bryant', 'KBRYANT', '515.123.45568', SYSDATE,
     'IT_PROG', 15000, 0.4, 103, 60);
   COMMIT;  
END;

Item 24 - Utilizando comando UPDATE no PL/SQL

SET SERVEROUTPUT ON
DECLARE
   vEmployee_id    employees.employee_id%type := 207; /*msm codigo do registro cadastrado no insert.*/
   vPercentual     NUMBER(3) := 10;
BEGIN
   UPDATE employees 
   SET    salary = salary * (1 + vPercentual / 100)
   WHERE  employee_id =  vEmployee_id;
   COMMIT;  
END;

Item 25 - Utilizando comando DELETE no PL/SQL

SET SERVEROUTPUT ON
DECLARE
   vEmployee_id  employees.employee_id%type := 207;
BEGIN
   DELETE FROM employees 
   WHERE  employee_id =  vEmployee_id;
   COMMIT;  
END;

Item 26 - Controlando transações no PL/SQL

- Transação consisiste em um conjunto de comandos dml que formam uma unidade logica de trabalho
- Transação termina quando: 
 - Commando commit ou rollback
 - Comando DCL ou DDL (Executa commit automatico)
 - Crash do sistema
 - Queda de rede.
 
- SAVEPOINT
 - "SAVEPOINT nomesavepoint;
 - ponto de controle
  - "ROLLBACK TO SAVEPOINT nomesavepoint
  - Descarta todas as mudanças feitas a partir do save point
  - Não encerra a transação como um todo

Ex1:
SET SERVEROUTPUT ON
DECLARE
   vEmployee_id    employees.employee_id%type := 150;
BEGIN
   UPDATE employees 
   SET    salary = 15000
   WHERE  employee_id =  vEmployee_id;
   COMMIT;  
END;

SET SERVEROUTPUT ON
DECLARE
   vEmployee_id    employees.employee_id%type := 150;
BEGIN
   UPDATE employees 
   SET    salary = 20000
   WHERE  employee_id =  vEmployee_id;
   ROLLBACK;  
END;

BEGIN
    INSERT INTO employees 
    (employee_id, first_name, last_name, email, phone_number, hire_date,
    job_id, salary, commission_pct, manager_id, department_id)
    VALUES 
    (employees_seq.nextval, 'Kobe', 'Bryant', 'KBRYANT', '515.123.45568', SYSDATE,
    'IT_PROG', 15000, 0.4, 103, 60);
    
    SAVEPOINT INSERTOK;
    
    UPDATE employees 
    SET    salary = 30000
    WHERE  job_id = 'IT_PROG';
    
    ROLLBACK TO INSERTOK;
    COMMIT;
END;

Item 27 - Cursor implicito no PL/SQL
- Ao executar um comando no sql, o oracle cria uma area na memoria
  para analisar o comando e executar.
- Ao criar um bloco (Seção begin e end). o pl/sql cria um cursor 
  implicito e gerencia o mesmo de forma automatica.
- SQL%ROWCOUNT - Numero de linhas afetadas pelo comando 
- SQL%FOUND - Retorna true se o cursor afetou 1 linha ou mais
- SQL%NOTFOUND - Retorna true se o cursor NÃO afetou nenhuma linha.
- SQL%ISOPEN - Retorna false, pois o plsql controla o cursor sozinho.
